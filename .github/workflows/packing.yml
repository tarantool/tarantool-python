name: packing

on:
  push:
  pull_request:
  pull_request_target:
    types: [labeled]

jobs:
  pack_pip:
    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false

    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v3
        # Checkout all tags for correct version computation
        with:
          fetch-depth: 0

      - name: Setup Python and basic packing tools
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install tools for packing
        run: pip install wheel

      - name: Install tools for package verification
        run: pip install twine

      - name: Pack source code
        run: python setup.py sdist

      - name: Pack wheel file
        run: python setup.py bdist_wheel

      - name: Verify the package
        run: twine check dist/*

      - name: Archive rpm artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pip_dist
          path: dist
          retention-days: 1

  pack_rpm:
    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)
    runs-on: ubuntu-20.04

    container:
      image: fedora:36

    strategy:
      fail-fast: false

    steps:
      - name: Bump git version
        run: dnf install -y git-2.37.3-1.fc36

      - name: Clone the connector repo
        uses: actions/checkout@v3
        # Checkout all tags for correct version computation
        with:
          fetch-depth: 0

      - name: Set ownership
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Setup Python and Python packing tools
        run: dnf install -y python3 python3-libs python3-pip python3-setuptools python3-wheel

      - name: Install rpm packing tools
        run: dnf install -y gcc rpm-build rpm-devel rpmlint make bash coreutils diffutils patch rpmdevtools

      - name: Prepare rpm tree
        run: rpmdev-setuptree

      - name: Pack rpm
        run: make rpm

      - name: Archive pip artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ~/rpmbuild/RPMS/noarch
          retention-days: 1

  run_tests_pip_package_install_linux:
    needs: pack_pip

    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false

      matrix:
        tarantool:
          - '2.10'
        python:
          - '3.6'
          - '3.10'
    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Remove connector source code
        run: python .github/scripts/remove_source_code.py

      - name: Install tarantool ${{ matrix.tarantool }}
        uses: tarantool/setup-tarantool@v1
        with:
          tarantool-version: ${{ matrix.tarantool }}

      - name: Download pip package artifact
        uses: actions/download-artifact@v3
        with:
          name: pip_dist

      - name: Install the package with pip from artifacts
        run: pip install *.whl

      - name: Install test requirements
        run: pip install -r requirements-test.txt

      - name: Run tests
        run: python -m unittest discover -v
        env:
          TEST_PURE_INSTALL: true

  run_tests_pip_package_install_windows:
    needs: pack_pip

    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)

    runs-on: windows-2022

    strategy:
      fail-fast: false

      matrix:
        # Use reduced test matrix cause Windows pipelines are long.
        tarantool:
          - '2.10.0.g0a5ce0b9c-1'
        python:
          - '3.6'
          - '3.10'
    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Remove connector source code
        run: python .github/scripts/remove_source_code.py

      - name: Download pip package artifact
        uses: actions/download-artifact@v3
        with:
          name: pip_dist

      - name: debug
        run: |
          (gci . *.whl).fullname

      - name: Install the package with pip from artifacts
        run: |
          pip install (gci . *.whl).fullname

      - name: Install test requirements
        run: pip install -r requirements-test.txt

      - name: Setup WSL for tarantool
        uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04

      - name: Install tarantool ${{ matrix.tarantool }} for WSL
        shell: wsl-bash_Ubuntu-20.04 {0}
        run: |
          curl -L https://tarantool.io/release/2/installer.sh | bash -s
          sudo apt install -y tarantool=${{ matrix.tarantool }} tarantool-dev=${{ matrix.tarantool }}

      - name: Setup test tarantool instance
        shell: wsl-bash_Ubuntu-20.04 {0}
        run: |
          rm -f ./tarantool.pid ./tarantool.log
          TNT_PID=$(tarantool ./test/suites/lib/tarantool_python_ci.lua > tarantool.log 2>&1 & echo $!)
          touch tarantool.pid
          echo $TNT_PID > ./tarantool.pid

      - name: Run tests
        env:
          REMOTE_TARANTOOL_HOST: localhost
          REMOTE_TARANTOOL_CONSOLE_PORT: 3302
          TEST_PURE_INSTALL: true
        run: python -m unittest discover -v

      - name: Stop test tarantool instance
        if: ${{ always() }}
        shell: wsl-bash_Ubuntu-20.04 {0}
        run: |
          cat tarantool.log || true
          kill $(cat tarantool.pid) || true

  run_tests_rpm_package_install_centos:
    needs: pack_rpm

    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)
    runs-on: ubuntu-20.04

    container:
      image: centos:7

    strategy:
      fail-fast: false

      matrix:
        tarantool:
          - '2.10.3'
        python:
          - '3.6'
          - '3.10'
    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v2

      # See https://github.com/actions/setup-python/issues/527
      - name: Setup Python
        run: yum install -y python3 python3-libs python3-pip

      - name: Remove connector source code
        run: python3 .github/scripts/remove_source_code.py

      - name: Install tarantool ${{ matrix.tarantool }}
        run: |
          curl -L https://tarantool.io/OtKysgx/release/2/installer.sh | bash
          yum install -y tarantool-${{ matrix.tarantool }} tarantool-devel-${{ matrix.tarantool }}

      - name: Download rpm package artifact
        uses: actions/download-artifact@v3
        with:
          name: package

      - name: Install the package with rpm from artifacts
        run: yum localinstall -y *.noarch.rpm

      - name: Install test requirements
        run: pip3 install -r requirements-test.txt

      - name: Run tests
        run: python3 -m unittest discover -v
        env:
          TEST_PURE_INSTALL: true

  run_tests_rpm_package_install_fedora:
    needs: pack_rpm

    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)
    runs-on: ubuntu-20.04

    container:
      image: fedora:${{ matrix.os_version }}

    strategy:
      fail-fast: false

      matrix:
        os_version:
          - '35'
          - '36'
          # - '37' -- There is no Tarantool for Fedora 37 yet.
        tarantool:
          - '2.10.3'
        python:
          - '3.6'
          - '3.10'

    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v2

      - name: Setup Python
        run: dnf install -y python3 python3-libs python3-pip

      - name: Remove connector source code
        run: python3 .github/scripts/remove_source_code.py

      - name: Install tarantool ${{ matrix.tarantool }}
        run: |
          curl -L https://tarantool.io/yeohchA/release/2/installer.sh | bash
          dnf install -y tarantool-${{ matrix.tarantool }}
          dnf install -y tarantool-devel-${{ matrix.tarantool }}

      - name: Download rpm package artifact
        uses: actions/download-artifact@v3
        with:
          name: package

      - name: Install the package with rpm from artifacts
        run: dnf install -y *.noarch.rpm

      - name: Install test requirements
        run: pip3 install -r requirements-test.txt

      # - name: Let's finish this
      #   uses: mxschmitt/action-tmate@v3

      - name: Run tests
        run: python3 -m unittest discover -v
        env:
          TEST_PURE_INSTALL: true
