name: packing

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  pull_request_target:
    types: [labeled]

jobs:
  pack_pip:
    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v3
        # Checkout all tags for correct version computation.
        with:
          fetch-depth: 0

      - name: Setup Python and basic packing tools
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install tools for packing and verification
        run: pip3 install wheel twine

      - name: Pack source and binary files
        run: make pip-dist

      - name: Verify the package
        run: make pip-dist-check

      - name: Archive pip artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pip_dist
          path: pip_dist
          retention-days: 1
          if-no-files-found: error

  run_tests_pip_package_linux:
    needs: pack_pip

    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Remove connector source code
        run: python3 .github/scripts/remove_source_code.py

      - name: Install tarantool
        uses: tarantool/setup-tarantool@v1
        with:
          tarantool-version: '2.10'

      - name: Download pip package artifacts
        uses: actions/download-artifact@v3
        with:
          name: pip_dist
          path: pip_dist

      - name: Install the package from pip artifacts
        run: pip3 install pip_dist/*.whl

      - name: Install test requirements
        run: pip3 install -r requirements-test.txt

      - name: Run tests
        run: make test-pure-install

  run_tests_pip_package_windows:
    needs: pack_pip

    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: (github.event_name == 'push') ||
      (github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.full_name != github.repository)

    runs-on: windows-latest

    strategy:
      fail-fast: false

    steps:
      - name: Clone the connector repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Remove connector source code
        run: python3 .github/scripts/remove_source_code.py

      - name: Download pip package artifacts
        uses: actions/download-artifact@v3
        with:
          name: pip_dist
          path: pip_dist

      - name: Install the package from pip artifacts
        run: pip3 install (gci ./pip_dist *.whl).fullname

      - name: Install test requirements
        run: pip3 install -r requirements-test.txt

      - name: Setup WSL for tarantool
        uses: Vampire/setup-wsl@v1
        with:
          distribution: Ubuntu-20.04

      - name: Install tarantool
        shell: wsl-bash_Ubuntu-20.04 {0}
        run: |
          curl -L https://tarantool.io/release/2/installer.sh | bash -s
          sudo apt install -y tarantool tarantool-dev

      - name: Setup test tarantool instance
        shell: wsl-bash_Ubuntu-20.04 {0}
        run: |
          rm -f ./tarantool.pid ./tarantool.log
          TNT_PID=$(tarantool ./test/suites/lib/tarantool_python_ci.lua > tarantool.log 2>&1 & echo $!)
          touch tarantool.pid
          echo $TNT_PID > ./tarantool.pid

      - name: Run tests
        env:
          REMOTE_TARANTOOL_HOST: localhost
          REMOTE_TARANTOOL_CONSOLE_PORT: 3302
        run: make test-pure-install

      - name: Stop test tarantool instance
        if: ${{ always() }}
        shell: wsl-bash_Ubuntu-20.04 {0}
        run: |
          cat tarantool.log || true
          kill $(cat tarantool.pid) || true
